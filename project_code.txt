----
D:\Coding\styx-cash\index.html
----
<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<link rel="icon" type="image/svg+xml" href="/vite.svg" />
		<!-- My fonts -->
		<link rel="stylesheet" href="/fonts/fonts.css" />

		<!-- Google Fonts -->
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=Manrope:wght@200..800&family=Montserrat:ital,wght@0,100..900;1,100..900&family=Public+Sans:ital,wght@0,100..900;1,100..900&display=swap"
			rel="stylesheet"
		/>

		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Vite + React + TS</title>
		<style>
			html,
			body {
				margin: 0;
			}
		</style>
	</head>
	<body style="">
		<div id="root"></div>
		<script type="module" src="/src/main.tsx"></script>
	</body>
</html>

----
D:\Coding\styx-cash\package.json
----
{
	"name": "styx-cash",
	"private": true,
	"version": "0.0.0",
	"type": "module",
	"scripts": {
		"dev": "vite",
		"build": "vite build"
	},
	"dependencies": {
		"@emotion/react": "^11.14.0",
		"@emotion/styled": "^11.14.1",
		"@mui/icons-material": "6.4.12",
		"@mui/material": "6.4.12",
		"axios": "^1.10.0",
		"i18next": "^25.2.1",
		"i18next-browser-languagedetector": "^8.2.0",
		"react": "18.2.0",
		"react-dom": "18.2.0",
		"react-i18next": "^15.5.3",
		"react-router-dom": "^7.6.2",
		"react-slick": "^0.30.3",
		"slick-carousel": "^1.8.1"
	},
	"devDependencies": {
		"@types/react": "18.2.0",
		"@types/react-dom": "18.2.0",
		"@types/react-slick": "^0.23.13",
		"@vitejs/plugin-react": "^4.4.1",
		"globals": "^16.0.0",
		"typescript": "~5.8.3",
		"vite": "^6.3.5"
	}
}

----
D:\Coding\styx-cash\src\api\authService.ts
----
import axios from 'axios'

const API_URL = 'http://localhost:3000'

export interface AuthResponse {
	accessToken: string
	refreshToken: string
}

export interface RegisterData {
	firstName: string
	lastName: string
	email: string
	phone: string
	country: string
	password: string
	isTermsAccepted: boolean
}

export interface LoginData {
	email: string
	password: string
}

export interface TokenPayload {
	sub: string
	email: string
	roles: string[]
	iat: number
	exp: number
}

export const registerUser = async (
	data: RegisterData
): Promise<AuthResponse> => {
	const response = await axios.post(`${API_URL}/user/auth/register`, data)
	return response.data
}

export const loginUser = async (data: LoginData): Promise<AuthResponse> => {
	const response = await axios.post(`${API_URL}/admin/auth/login`, data)
	return response.data
}

const decodeToken = (token: string): TokenPayload | null => {
	try {
		const base64Url = token.split('.')[1]
		const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/')
		const jsonPayload = decodeURIComponent(
			atob(base64)
				.split('')
				.map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))
				.join('')
		)
		return JSON.parse(jsonPayload)
	} catch (e) {
		console.error('Failed to decode token', e)
		return null
	}
}

export const storeTokens = (tokens: AuthResponse) => {
	localStorage.setItem('accessToken', tokens.accessToken)
	localStorage.setItem('refreshToken', tokens.refreshToken)

	const payload = decodeToken(tokens.accessToken)
	if (payload) {
		localStorage.setItem(
			'userData',
			JSON.stringify({
				id: payload.sub,
				email: payload.email,
				roles: payload.roles,
				tokenExp: payload.exp,
			})
		)
	}
}

export const clearTokens = () => {
	localStorage.removeItem('accessToken')
	localStorage.removeItem('refreshToken')
	localStorage.removeItem('userData')
}

export const getUserData = (): TokenPayload | null => {
	const userData = localStorage.getItem('userData')
	return userData ? JSON.parse(userData) : null
}

export const isAuthenticated = () => {
	return !!localStorage.getItem('accessToken')
}

axios.interceptors.request.use(
	config => {
		const token = localStorage.getItem('accessToken')
		if (token) {
			config.headers.Authorization = `Bearer ${token}`
		}
		return config
	},
	error => {
		return Promise.reject(error)
	}
)

let isRefreshing = false
let failedQueue: any[] = []

const processQueue = (error: any, token: string | null = null) => {
	while (failedQueue.length) {
		const request = failedQueue.shift()
		if (token) {
			request.resolve(token)
		} else {
			request.reject(error)
		}
	}
}

axios.interceptors.response.use(
	response => response,
	async error => {
		const originalRequest = error.config

		if (
			error.response?.status === 401 &&
			!originalRequest._retry &&
			localStorage.getItem('refreshToken')
		) {
			originalRequest._retry = true

			if (isRefreshing) {
				try {
					const token = await new Promise<string>((resolve, reject) => {
						failedQueue.push({ resolve, reject })
					})
					originalRequest.headers['Authorization'] = 'Bearer ' + token
					return axios(originalRequest)
				} catch (err) {
					return Promise.reject(err)
				}
			}

			isRefreshing = true

			try {
				const refreshToken = localStorage.getItem('refreshToken')
				const res = await axios.post(`${API_URL}/admin/auth/refresh`, {
					refreshToken,
				})

				const newAccessToken = res.data.accessToken
				const newRefreshToken = res.data.refreshToken

				localStorage.setItem('accessToken', newAccessToken)
				localStorage.setItem('refreshToken', newRefreshToken)

				const payload = decodeToken(newAccessToken)
				if (payload) {
					localStorage.setItem(
						'userData',
						JSON.stringify({
							id: payload.sub,
							email: payload.email,
							roles: payload.roles,
							tokenExp: payload.exp,
						})
					)
				}

				axios.defaults.headers.common['Authorization'] =
					'Bearer ' + newAccessToken
				processQueue(null, newAccessToken)

				originalRequest.headers['Authorization'] = 'Bearer ' + newAccessToken
				return axios(originalRequest)
			} catch (err) {
				processQueue(err, null)
				clearTokens()
				window.location.href = '/'
				return Promise.reject(err)
			} finally {
				isRefreshing = false
			}
		}

		return Promise.reject(error)
	}
)

----
D:\Coding\styx-cash\src\api\clientService.ts
----
import { TransactionCardProps } from '@/components/TransactionCard/TransactionCard'
import axios from 'axios'

const API_URL = 'http://localhost:3000'

export interface Balance {
	$numberDecimal: string
}

export interface WireTransfer {
	firstName: string
	lastName: string
	accountNumber: string
	routingNumber: string
	bankName: string
	address: string
	_id: string
}

export interface ZelleTransfer {
	recipientName: string
	email: string
	phone: string
	_id: string
}

export interface Client {
	_id: string
	firstName: string
	lastName: string
	email: string
	phone: string
	country: string
	password: string
	isTermsAccepted: boolean
	roles: string[]
	isVerified: boolean
	documents: string[]
	googleDriveFolderId: string
	balance: Balance
	balanceBTC: Balance
	showBTCBalance: boolean
	walletBTCAddress: string
	paypalAddress: string
	wireTransfer: WireTransfer
	zelleTransfer: ZelleTransfer
	transactions: TransactionCardProps[]
	createdAt: string
	updatedAt: string
}

export const getClients = async (): Promise<Client[]> => {
	const response = await axios.get(`${API_URL}/admin/users`, {
		headers: {
			Authorization: `Bearer ${localStorage.getItem('accessToken')}`,
		},
	})
	return response.data
}

export const getClient = async (id: string): Promise<Client> => {
	const response = await axios.get(`${API_URL}/admin/users/${id}`, {
		headers: {
			Authorization: `Bearer ${localStorage.getItem('accessToken')}`,
		},
	})
	return response.data
}

export const getProfile = async (): Promise<Client> => {
	const response = await axios.get(`${API_URL}/user/profile`, {
		headers: {
			Authorization: `Bearer ${localStorage.getItem('accessToken')}`,
		},
	})
	return response.data
}

export const verifyDocuments = async (files: File[]) => {
	const token = localStorage.getItem('accessToken')
	if (!token) {
		throw new Error('No access token found')
	}

	const formData = new FormData()
	files.forEach(file => {
		formData.append('file', file)
	})

	const response = await axios.post(
		'http://localhost:3000/user/documents',
		formData,
		{
			headers: {
				Authorization: `Bearer ${token}`,
				'Content-Type': 'multipart/form-data',
			},
		}
	)

	return response.data
}

export const updateClientField = async (
	id: string,
	payload: Record<string, any>
) => {
	const token = localStorage.getItem('accessToken')
	if (!token) throw new Error('No token found')

	return axios.patch(`http://localhost:3000/admin/users/${id}`, payload, {
		headers: {
			Authorization: `Bearer ${token}`,
			'Content-Type': 'application/json',
		},
	})
}

----
D:\Coding\styx-cash\src\App.tsx
----
import { BrowserRouter } from 'react-router-dom'
import RouterContent from '@/router/RouterContent'

const App = () => {
	return (
		<BrowserRouter>
			<RouterContent />
		</BrowserRouter>
	)
}

export default App

----
D:\Coding\styx-cash\src\components\index.tsx
----
export { default as Loader } from './Loader'
export { default as LanguageSwitcher } from './LanguageSwitcher'
export { default as TransactionCard } from './TransactionCard'
export { default as VerificationBlock } from './VerificationBlock'

----
D:\Coding\styx-cash\src\components\Loader\index.tsx
----
export { default } from './Loader'

----
D:\Coding\styx-cash\src\components\Loader\Loader.tsx
----
import { Box, CircularProgress } from '@mui/material'

const Loader = () => {
	return (
		<Box
			sx={{
				display: 'flex',
				justifyContent: 'center',
				alignItems: 'center',
				height: '100vh',
			}}
		>
			<CircularProgress />
		</Box>
	)
}

export default Loader

----
D:\Coding\styx-cash\src\components\VerificationBlock\index.tsx
----
export { default } from './VerificationBlock'

----
D:\Coding\styx-cash\src\components\VerificationBlock\VerificationBlock.tsx
----
import { Box, Typography, SxProps, Theme } from '@mui/material'
import LabelIcon from '@mui/icons-material/Label'
import { useTranslation } from 'react-i18next'

interface VerificationProps {
	verified: boolean
	sx?: SxProps<Theme>
}

const VerificationBlock = ({ verified = false, sx }: VerificationProps) => {
	const { t } = useTranslation()
	return (
		<Box
			sx={{
				width: '192px',
				height: '38px',
				px: '10px',
				border: '1px solid',
				borderRadius: '10px',
				borderColor: verified ? '#52BC37' : '#D72828',
				display: 'flex',
				alignItems: 'center',
				justifyContent: 'space-between',
				gap: '8px',
				...sx,
			}}
		>
			<Typography
				sx={{
					fontFamily: 'Manrope',
					fontSize: '16px',
					lineHeight: 1.3,
					color: verified ? '#52BC37' : '#D72828',
				}}
			>
				{verified ? t('verified') : t('no-verified')}
			</Typography>
			<LabelIcon
				sx={{
					color: verified ? '#52BC37' : '#D72828',
					transform: 'rotate(90deg)',
				}}
			/>
		</Box>
	)
}

export default VerificationBlock

----
D:\Coding\styx-cash\src\pages\AdminTransactionsPage\index.tsx
----
export { default } from './AdminTransactionsPage'

----
D:\Coding\styx-cash\src\pages\ClientPage\ClientPage.tsx
----
import { useEffect, useRef, useState, useCallback } from 'react'
import {
	Box,
	IconButton,
	TextField,
	Typography,
	Checkbox,
	Autocomplete,
	MenuItem,
	Select,
	Dialog,
	DialogContent,
	DialogActions,
	Button,
} from '@mui/material'
import EditIcon from '@mui/icons-material/Edit'
import CheckIcon from '@mui/icons-material/Check'
import LabelIcon from '@mui/icons-material/Label'
import { useTranslation } from 'react-i18next'
import { useParams } from 'react-router-dom'
import { Loader } from '@/components'
import { Client, getClient, updateClientField } from '@/api/clientService'
import countries from '@/pages/RegisterModal/countries.json'

const ClientPage = () => {
	const { t } = useTranslation()
	const { id } = useParams<{ id: string }>()
	const [loading, setLoading] = useState(true)
	const [error, setError] = useState('')

	const [client, setClient] = useState<Client>()
	const [isEditing, setIsEditing] = useState<{ [key: string]: boolean }>({})

	const [firstName, setFirstName] = useState('')
	const [lastName, setLastName] = useState('')
	const [phone, setPhone] = useState('')
	const [isVerified, setIsVerified] = useState(false)
	const [walletBTCAddress, setWalletBTCAddress] = useState('')
	const [wireTransferFirstName, setWireTransferFirstName] = useState('')
	const [wireTransferLastName, setWireTransferLastName] = useState('')
	const [wireTransferAccountNumber, setWireTransferAccountNumber] = useState('')
	const [wireTransferRoutingNumber, setWireTransferRoutingNumber] = useState('')
	const [wireTransferBankName, setWireTransferBankName] = useState('')
	const [wireTransferAddress, setWireTransferAddress] = useState('')
	const [paypal, setPaypal] = useState('')
	const [zelleName, setZelleName] = useState('')
	const [zelleEmail, setZelleEmail] = useState('')
	const [zellePhone, setZellePhone] = useState('')
	const [country, setCountry] = useState('')
	const [password, setPassword] = useState('')
	const [balance, setBalance] = useState('')
	const [balanceBTC, setBalanceBTC] = useState('')
	const [showBTCBalance, setShowBTCBalance] = useState(false)

	const inputRefs = useRef<{ [key: string]: HTMLInputElement | null }>({})

	const [isWalletModalOpen, setIsWalletModalOpen] = useState(false)
	const [modalInputKey, setModalInputKey] = useState<string | null>(null)
	const [modalWireValues, setModalWireValues] = useState({
		firstName: '',
		lastName: '',
		accountNumber: '',
		routingNumber: '',
		bankName: '',
		address: '',
	})
	const [modalZelleValues, setModalZelleValues] = useState({
		name: '',
		email: '',
		phone: '',
	})
	const [modalInputValue, setModalInputValue] = useState('')
	const [modalName, setModalName] = useState('')

	useEffect(() => {
		const fetchClient = async () => {
			try {
				if (!id) {
					setError(t('Client ID not provided'))
					return
				}
				const data = await getClient(id)
				setClient(data)
				setFirstName(data.firstName)
				setLastName(data.lastName)
				setPhone(data.phone)
				setIsVerified(data.isVerified)
				setWalletBTCAddress(data.walletBTCAddress)
				setWireTransferFirstName(data.wireTransfer.firstName)
				setWireTransferLastName(data.wireTransfer.lastName)
				setWireTransferLastName(data.wireTransfer.lastName)
				setWireTransferAccountNumber(data.wireTransfer.accountNumber)
				setWireTransferRoutingNumber(data.wireTransfer.routingNumber)
				setWireTransferBankName(data.wireTransfer.bankName)
				setWireTransferAddress(data.wireTransfer.address)
				setPaypal(data.paypalAddress)
				setZelleName(data.zelleTransfer.recipientName)
				setZelleEmail(data.zelleTransfer.email)
				setZellePhone(data.zelleTransfer.phone)
				setCountry(data.country)
				setPassword(data.password)
				setBalance(Number(data.balance.$numberDecimal).toFixed(2))
				setBalanceBTC(Number(data.balanceBTC.$numberDecimal).toFixed(8))
				setShowBTCBalance(data.showBTCBalance)
			} catch (err) {
				setError(t('error occurred'))
				console.error('Failed to fetch client:', err)
			} finally {
				setLoading(false)
			}
		}

		fetchClient()
	}, [id, t])

	const focusInput = useCallback((key: string) => {
		setTimeout(() => {
			inputRefs.current[key]?.focus()
		}, 0)
	}, [])

	const handleKeyDown = (
		e: React.KeyboardEvent<HTMLInputElement>,
		key: string
	) => {
		if (e.key === 'Enter') {
			e.preventDefault()
			setIsEditing(prev => ({
				...prev,
				[key]: !prev[key],
			}))
			if (!isEditing[key]) {
				focusInput(key)
			}
		}
	}

	const handlePhoneChange = (value: string) => {
		const digits = value.replace(/\D/g, '')
		setPhone(digits.length === 0 ? '' : `+${digits}`)
	}

	const handleModalPhoneChange = (value: string) => {
		const digits = value.replace(/\D/g, '')
		setModalZelleValues(prev => ({
			...prev,
			phone: digits.length === 0 ? '' : `+${digits}`,
		}))
	}

	const handleModalSave = async () => {
		if (!id) return

		try {
			if (modalInputKey === 'walletBTCAddress') {
				console.log('Sending update:', { [modalInputKey]: modalInputValue })
				await handleSaveField('walletBTCAddress', modalInputValue)
				setWalletBTCAddress(modalInputValue)
			} else if (modalInputKey === 'paypal') {
				await handleSaveField('paypalAddress', modalInputValue)
				setPaypal(modalInputValue)
			} else if (modalInputKey === 'zelle') {
				const updates: Record<string, any> = {}
				if (modalZelleValues.name !== zelleName)
					updates['zelleTransfer.recipientName'] = modalZelleValues.name
				if (modalZelleValues.email !== zelleEmail)
					updates['zelleTransfer.email'] = modalZelleValues.email
				if (modalZelleValues.phone !== zellePhone)
					updates['zelleTransfer.phone'] = modalZelleValues.phone

				if (Object.keys(updates).length > 0) {
					await updateClientField(id, updates)
					setZelleName(modalZelleValues.name)
					setZelleEmail(modalZelleValues.email)
					setZellePhone(modalZelleValues.phone)
				}
			} else if (modalInputKey === 'wire transfer') {
				const updates: Record<string, any> = {}
				if (modalWireValues.firstName !== wireTransferFirstName)
					updates['wireTransfer.firstName'] = modalWireValues.firstName
				if (modalWireValues.lastName !== wireTransferLastName)
					updates['wireTransfer.lastName'] = modalWireValues.lastName
				if (modalWireValues.accountNumber !== wireTransferAccountNumber)
					updates['wireTransfer.accountNumber'] = modalWireValues.accountNumber
				if (modalWireValues.routingNumber !== wireTransferRoutingNumber)
					updates['wireTransfer.routingNumber'] = modalWireValues.routingNumber
				if (modalWireValues.bankName !== wireTransferBankName)
					updates['wireTransfer.bankName'] = modalWireValues.bankName
				if (modalWireValues.address !== wireTransferAddress)
					updates['wireTransfer.address'] = modalWireValues.address

				if (Object.keys(updates).length > 0) {
					await updateClientField(id, updates)
					setWireTransferFirstName(modalWireValues.firstName)
					setWireTransferLastName(modalWireValues.lastName)
					setWireTransferAccountNumber(modalWireValues.accountNumber)
					setWireTransferRoutingNumber(modalWireValues.routingNumber)
					setWireTransferBankName(modalWireValues.bankName)
					setWireTransferAddress(modalWireValues.address)
				}
			}

			setIsWalletModalOpen(false)
		} catch (err) {
			console.error('Failed to save modal changes:', err)
		}
	}

	const handleSaveField = async (field: string, value: any) => {
		if (!id) return

		try {
			console.log('Sending update:', { [field]: value })
			await updateClientField(id, { [field]: value })
			// Обновляем локальное состояние клиента после успешного сохранения
			setClient(prev => (prev ? { ...prev, [field]: value } : prev))
		} catch (err) {
			console.error('Failed to update field:', err)
			// Можно добавить уведомление об ошибке
		}
	}

	if (loading) return <Loader />
	if (error || !client) return <Typography color='error'>{error}</Typography>

	const inputs = [
		{
			name: t('first name'),
			key: 'firstName',
			value: firstName,
			onchange: (val: string) => setFirstName(val),
			type: 'string',
		},
		{
			name: t('last name'),
			key: 'lastName',
			value: lastName,
			onchange: (val: string) => setLastName(val),
			type: 'string',
		},
		{
			name: t('telephone'),
			key: 'phone',
			value: phone,
			onchange: (val: string) => handlePhoneChange(val),
			type: 'string',
		},
		{
			name: t('verification status'),
			key: 'isVerified',
			value: isVerified.toString(),
			onchange: (val: string) => setIsVerified(val === 'true'),
			type: 'boolean',
			select: true,
			options: [
				{ label: t('verified'), value: true },
				{ label: t('no-verified'), value: false },
			],
		},
		{
			name: t('wallet'),
			key: 'walletBTCAddress',
			value: walletBTCAddress,
			onchange: (val: string) => setWalletBTCAddress(val),
			inputType: 'modal',
		},
		{
			name: 'Wire transfer',
			key: 'wire transfer',
			value: `${wireTransferFirstName || ''} ${wireTransferLastName || ''}`,
			inputType: 'modal',
		},
		{
			img: '/paypal.svg',
			key: 'paypal',
			value: paypal,
			onchange: (val: string) => setPaypal(val),
			inputType: 'modal',
		},
		{
			img: '/zelle.svg',
			key: 'zelle',
			value: `${zelleName || ''} ${zelleEmail || ''}`,
			inputType: 'modal',
		},
		{
			name: t('mycountry'),
			key: 'country',
			value: country,
			onchange: (val: string) => setCountry(val),
			type: 'string',
		},
		{
			name: t('password'),
			key: 'password',
			value: '',
			onchange: (val: string) => setPassword(val),
			type: 'string',
		},
		{
			name: t('balanceUSD'),
			key: 'balance',
			value: balance,
			onchange: (val: string) => setBalance(val),
			type: 'string',
		},
		{
			name: t('balanceBTC'),
			key: 'balanceBTC',
			value: balanceBTC,
			onchange: (val: string) => setBalanceBTC(val),
			type: 'string',
		},
	]

	return (
		<Box>
			<Typography sx={{ ml: '2px', fontFamily: 'Manrope', fontSize: '14px' }}>
				<span style={{ opacity: 0.5 }}>
					{t('admin menu')} | {t('clients')}
				</span>{' '}
				| {id}
			</Typography>

			<Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
				<Box sx={{ maxWidth: '375px', width: '100%' }}>
					<Box
						sx={{
							mt: '30px',
							display: 'flex',
							alignItems: 'center',
							gap: '15px',
						}}
					>
						<Typography
							sx={{
								fontFamily: 'Manrope',
								fontSize: '22px',
								fontWeight: 700,
								lineHeight: 1,
								textTransform: 'uppercase',
							}}
						>
							{t('client information')}
						</Typography>
						<Typography
							sx={{
								fontFamily: 'Manrope',
								fontSize: '13px',
								fontWeight: 400,
								lineHeight: 1,
								color: '#232323',
								opacity: 0.5,
							}}
						>
							{client.firstName} {client.lastName}
						</Typography>
					</Box>

					<Box
						sx={{
							maxWidth: '375px',
							width: '100%',
							mt: '30px',
							boxSizing: 'border-box',
						}}
					>
						{inputs.map(input => (
							<Box
								key={input.key}
								sx={{
									width: '100%',
									height: '32px',
									px: '10px',
									display: 'flex',
									justifyContent: 'space-between',
									alignItems: 'center',
									borderRadius: '8px',
									backgroundColor: '#F7F9FF',
									mb: '10px',
									boxSizing: 'border-box',
								}}
							>
								<Box sx={{ display: 'flex', gap: '5px' }}>
									{input.key === 'walletBTCAddress' && (
										<Box component='img' src='/wallet.svg' />
									)}
									{input.key === 'wire transfer' && (
										<Box component='img' src='/wire-transfer.svg' />
									)}
									{input.img ? (
										<Box component='img' src={input.img} />
									) : (
										<Typography
											sx={{
												fontFamily: 'Manrope',
												fontSize: '13px',
												fontWeight: 700,
											}}
										>
											{input.name}
										</Typography>
									)}
								</Box>
								<Box sx={{ display: 'flex', alignItems: 'center', gap: '5px' }}>
									{input.inputType === 'modal' ? (
										<Typography
											sx={{
												width: '165px',
												fontFamily: 'Manrope',
												fontSize: '13px',
												color: 'rgba(0, 0, 0, 0.38);',
											}}
										>
											{input.key === 'walletBTCAddress'
												? input.value
												: input.key === 'paypal'
												? input.value
												: 'details...'}
										</Typography>
									) : input.key === 'isVerified' ? (
										<Select
											variant='standard'
											value={isVerified.toString()}
											onChange={e => input.onchange?.(e.target.value)}
											displayEmpty
											inputRef={el => (inputRefs.current[input.key] = el)}
											onKeyDown={e => {
												if (e.key === 'Enter') {
													e.preventDefault()
													setIsEditing(prev => ({
														...prev,
														[input.key]: false,
													}))
												}
											}}
											MenuProps={{
												PaperProps: {
													sx: {
														width: '172px',
														ml: '-12px',
													},
												},
												// Запрещаем открытие меню при isEditing false
												onMouseDown: (e: React.MouseEvent<HTMLDivElement>) => {
													if (!isEditing[input.key]) {
														e.preventDefault()
														e.stopPropagation()
													}
												},
											}}
											renderValue={selected => {
												const option = input.options?.find(
													opt => opt.value.toString() === selected
												)
												if (!option) return ''

												return (
													<Box
														sx={{
															display: 'flex',
															alignItems: 'cente',
															justifyContent: 'space-between',
															gap: '8px',
															// Запрещаем события мыши при неактивном состоянии
															pointerEvents: isEditing[input.key]
																? 'auto'
																: 'none',
														}}
													>
														<Typography
															sx={{
																fontFamily: 'Manrope',
																fontSize: '13px',
																color:
																	option.value === true ? '#52BC37' : '#D72828',
																opacity: '1 !important',
															}}
														>
															{option.label}
														</Typography>

														<LabelIcon
															sx={{
																width: '18px',
																height: '18px',
																color:
																	option.value === true ? '#52BC37' : '#D72828',
																transform: 'rotate(90deg)',
																opacity: '1 !important',
															}}
														/>
													</Box>
												)
											}}
											inputProps={{
												disableUnderline: true,
												readOnly: !isEditing[input.key],
											}}
											sx={{
												width: '165px',
												fontSize: '13px',
												fontFamily: 'Manrope',
												padding: 0,
												backgroundColor: 'transparent',
												'& .MuiSelect-icon': {
													display: isEditing[input.key] ? 'block' : 'none',
												},
												'&::before': {
													borderBottom: 'none !important',
												},
												'&::after': {
													borderBottom: 'none !important',
												},
												'&.Mui-disabled': {
													opacity: 1,
													color: 'inherit',
												},
												// Запрещаем события мыши при неактивном состоянии
												pointerEvents: isEditing[input.key] ? 'auto' : 'none',
												cursor: isEditing[input.key] ? 'pointer' : 'default',
											}}
										>
											{input.options?.map(option => (
												<MenuItem
													key={option.value.toString()}
													value={option.value.toString()}
													sx={{
														display: 'flex',
														alignItems: 'center',
														justifyContent: 'space-between',
													}}
												>
													<Typography
														sx={{
															fontFamily: 'Manrope',
															fontSize: '13px',
															color:
																option.value === true ? '#52BC37' : '#D72828',
														}}
													>
														{option.label}
													</Typography>
													<LabelIcon
														sx={{
															width: '18px',
															height: '18px',
															color:
																option.value === true ? '#52BC37' : '#D72828',
															transform: 'rotate(90deg)',
														}}
													/>
												</MenuItem>
											))}
										</Select>
									) : input.key === 'country' ? (
										<Autocomplete
											freeSolo
											options={countries.map(option => option.label)}
											value={country}
											onChange={(event, newValue) => setCountry(newValue || '')}
											disabled={!isEditing.country}
											renderInput={params => (
												<TextField
													{...params}
													variant='standard'
													inputRef={el => (inputRefs.current['country'] = el)}
													InputProps={{
														...params.InputProps,
														onKeyDown: (
															e: React.KeyboardEvent<HTMLInputElement>
														) => handleKeyDown(e, 'country'),
														disableUnderline: true,
														sx: {
															width: '165px',
															fontSize: '13px',
															fontFamily: 'Manrope',
															padding: 0,
															backgroundColor: 'transparent',
														},
													}}
												/>
											)}
										/>
									) : (
										<TextField
											variant='standard'
											value={input.value}
											onChange={e => {
												const val = e.target.value
												if (
													input.key === 'balance' ||
													input.key === 'balanceBTC'
												) {
													let cleaned = val.replace(/[^0-9.]/g, '')
													const parts = cleaned.split('.')
													if (parts.length > 2) {
														cleaned = parts[0] + '.' + parts.slice(1).join('')
													}
													input.onchange?.(cleaned)
												} else {
													input.onchange?.(val)
												}
											}}
											disabled={!isEditing[input.key]}
											inputRef={el => (inputRefs.current[input.key] = el)}
											InputProps={{
												disableUnderline: true,
												type: input.type ?? 'text',
												sx: {
													width: '165px',
													fontSize: '13px',
													fontFamily: 'Manrope',
													padding: 0,
													backgroundColor: 'transparent',
												},
											}}
											inputProps={{
												onKeyDown: (e: React.KeyboardEvent<HTMLInputElement>) =>
													handleKeyDown(e, input.key),
											}}
										/>
									)}
									{input.inputType === 'modal' ? (
										<IconButton
											onClick={() => {
												setModalInputKey(input.key)
												if (input.key === 'wire transfer') {
													setModalWireValues({
														firstName: wireTransferFirstName,
														lastName: wireTransferLastName,
														accountNumber: wireTransferAccountNumber,
														routingNumber: wireTransferRoutingNumber,
														bankName: wireTransferBankName,
														address: wireTransferAddress,
													})
												} else if (input.key === 'zelle') {
													setModalZelleValues({
														name: zelleName,
														email: zelleEmail,
														phone: zellePhone,
													})
												} else {
													setModalInputValue(input.value)
												}
												setIsWalletModalOpen(true)
												setModalName(input.key)
											}}
											sx={{ mr: '-10px' }}
										>
											<EditIcon
												sx={{ width: '19px', height: '19px', color: '#0246FF' }}
											/>
										</IconButton>
									) : (
										<IconButton
											onClick={async () => {
												if (isEditing[input.key]) {
													// Сохраняем изменения
													try {
														let valueToSave: any
														if (input.key === 'firstName')
															valueToSave = firstName
														else if (input.key === 'lastName')
															valueToSave = lastName
														else if (input.key === 'phone') valueToSave = phone
														else if (input.key === 'country')
															valueToSave = country
														else if (input.key === 'balance')
															valueToSave = Number(balance)
														else if (input.key === 'balanceBTC')
															valueToSave = Number(balanceBTC)
														else if (input.key === 'isVerified')
															valueToSave = isVerified

														await handleSaveField(input.key, valueToSave)

														setIsEditing(prev => ({
															...prev,
															[input.key]: false,
														}))
													} catch (err) {
														console.error('Failed to save field:', err)
													}
												} else {
													setIsEditing(prev => ({
														...prev,
														[input.key]: true,
													}))
													focusInput(input.key)
												}
											}}
											sx={{ mr: '-10px' }}
										>
											{isEditing[input.key] ? (
												<CheckIcon
													sx={{
														width: '19px',
														height: '19px',
														color: '#52BC37',
													}}
												/>
											) : (
												<EditIcon
													sx={{
														width: '19px',
														height: '19px',
														color: '#0246FF',
													}}
												/>
											)}
										</IconButton>
									)}
								</Box>
							</Box>
						))}

						<Box
							sx={{
								display: 'flex',
								alignItems: 'center',
							}}
						>
							<Checkbox
								checked={showBTCBalance}
								onChange={async () => {
									const newValue = !showBTCBalance
									try {
										await handleSaveField('showBTCBalance', newValue)
										setShowBTCBalance(newValue)
									} catch (err) {
										console.error('Failed to update showBTCBalance:', err)
									}
								}}
								sx={{ ml: '-11px' }}
							/>
							<Typography
								sx={{
									fontFamily: 'Manrope',
									fontSize: '13px',
									fontWeight: 700,
									lineHeight: 1,
								}}
							>
								{t('showBTCBalance')}
							</Typography>
						</Box>
					</Box>
				</Box>
				<Dialog
					open={isWalletModalOpen}
					onClose={() => setIsWalletModalOpen(false)}
					PaperProps={{
						sx: {
							boxSizing: 'border-box',
							width: '354px',
							borderRadius: '6px',
							p: '16px',
						},
					}}
				>
					<DialogContent sx={{ p: 0 }}>
						{modalInputKey === 'zelle' ? (
							<>
								<Typography
									sx={{
										mb: '5px',
										fontFamily: 'Manrope',
										fontSize: '12px',
										fontWeight: 700,
									}}
								>
									{t('name')}
								</Typography>
								<TextField
									autoFocus
									variant='standard'
									fullWidth
									InputProps={{
										disableUnderline: true,
										sx: {
											fontSize: '13px',
											fontFamily: 'Manrope',
											p: '2px 5px 1px 5px',
											backgroundColor: 'transparent',
											border: '1px solid #0C3E9C66',
											borderRadius: '8px',
										},
									}}
									value={modalZelleValues.name}
									onChange={e =>
										setModalZelleValues(prev => ({
											...prev,
											name: e.target.value,
										}))
									}
									sx={{ mb: 2 }}
								/>
								<Typography
									sx={{
										mb: '5px',
										fontFamily: 'Manrope',
										fontSize: '12px',
										fontWeight: 700,
									}}
								>
									{t('email')}
								</Typography>
								<TextField
									variant='standard'
									fullWidth
									InputProps={{
										disableUnderline: true,
										sx: {
											fontSize: '13px',
											fontFamily: 'Manrope',
											p: '2px 5px 1px 5px',
											backgroundColor: 'transparent',
											border: '1px solid #0C3E9C66',
											borderRadius: '8px',
										},
									}}
									type='email'
									value={modalZelleValues.email}
									onChange={e =>
										setModalZelleValues(prev => ({
											...prev,
											email: e.target.value,
										}))
									}
									sx={{ mb: 2 }}
								/>
								<Typography
									sx={{
										mb: '5px',
										fontFamily: 'Manrope',
										fontSize: '12px',
										fontWeight: 700,
									}}
								>
									{t('number')}
								</Typography>
								<TextField
									variant='standard'
									type='text'
									fullWidth
									InputProps={{
										disableUnderline: true,
										sx: {
											fontSize: '13px',
											fontFamily: 'Manrope',
											p: '2px 5px 1px 5px',
											backgroundColor: 'transparent',
											border: '1px solid #0C3E9C66',
											borderRadius: '8px',
										},
									}}
									value={modalZelleValues.phone}
									onChange={e => handleModalPhoneChange(e.target.value)}
								/>
							</>
						) : modalInputKey === 'wire transfer' ? (
							<>
								<Typography
									sx={{
										mb: '5px',
										fontFamily: 'Manrope',
										fontSize: '12px',
										fontWeight: 700,
									}}
								>
									{t('first name')}
								</Typography>
								<TextField
									variant='standard'
									type='text'
									fullWidth
									InputProps={{
										disableUnderline: true,
										sx: {
											fontSize: '13px',
											fontFamily: 'Manrope',
											p: '2px 5px 1px 5px',
											backgroundColor: 'transparent',
											border: '1px solid #0C3E9C66',
											borderRadius: '8px',
										},
									}}
									value={modalWireValues.firstName}
									onChange={e =>
										setModalWireValues(prev => ({
											...prev,
											firstName: e.target.value,
										}))
									}
									sx={{ mb: 2 }}
								/>
								<Typography
									sx={{
										mb: '5px',
										fontFamily: 'Manrope',
										fontSize: '12px',
										fontWeight: 700,
									}}
								>
									{t('last name')}
								</Typography>
								<TextField
									variant='standard'
									type='text'
									fullWidth
									InputProps={{
										disableUnderline: true,
										sx: {
											fontSize: '13px',
											fontFamily: 'Manrope',
											p: '2px 5px 1px 5px',
											backgroundColor: 'transparent',
											border: '1px solid #0C3E9C66',
											borderRadius: '8px',
										},
									}}
									value={modalWireValues.lastName}
									onChange={e =>
										setModalWireValues(prev => ({
											...prev,
											lastName: e.target.value,
										}))
									}
									sx={{ mb: 2 }}
								/>

								<Typography
									sx={{
										mb: '5px',
										fontFamily: 'Manrope',
										fontSize: '12px',
										fontWeight: 700,
									}}
								>
									{t('account number')}
								</Typography>
								<TextField
									variant='standard'
									type='text'
									fullWidth
									inputProps={{
										inputMode: 'numeric',
										pattern: '[0-9]*',
									}}
									InputProps={{
										disableUnderline: true,
										sx: {
											fontSize: '13px',
											fontFamily: 'Manrope',
											p: '2px 5px 1px 5px',
											backgroundColor: 'transparent',
											border: '1px solid #0C3E9C66',
											borderRadius: '8px',
										},
									}}
									value={modalWireValues.accountNumber}
									onChange={e =>
										setModalWireValues(prev => ({
											...prev,
											accountNumber: e.target.value.replace(/\D/g, ''),
										}))
									}
									sx={{ mb: 2 }}
								/>
								<Typography
									sx={{
										mb: '5px',
										fontFamily: 'Manrope',
										fontSize: '12px',
										fontWeight: 700,
									}}
								>
									{t('routing number')}
								</Typography>
								<TextField
									variant='standard'
									type='text'
									fullWidth
									InputProps={{
										disableUnderline: true,
										sx: {
											fontSize: '13px',
											fontFamily: 'Manrope',
											p: '2px 5px 1px 5px',
											backgroundColor: 'transparent',
											border: '1px solid #0C3E9C66',
											borderRadius: '8px',
										},
									}}
									inputProps={{
										inputMode: 'numeric',
										pattern: '[0-9]*',
									}}
									value={modalWireValues.routingNumber}
									onChange={e =>
										setModalWireValues(prev => ({
											...prev,
											routingNumber: e.target.value.replace(/\D/g, ''),
										}))
									}
									sx={{ mb: 2 }}
								/>

								<Typography
									sx={{
										mb: '5px',
										fontFamily: 'Manrope',
										fontSize: '12px',
										fontWeight: 700,
									}}
								>
									{t('bank')}
								</Typography>
								<TextField
									variant='standard'
									type='text'
									fullWidth
									inputProps={{
										inputMode: 'numeric',
										pattern: '[0-9]*',
									}}
									InputProps={{
										disableUnderline: true,
										sx: {
											fontSize: '13px',
											fontFamily: 'Manrope',
											p: '2px 5px 1px 5px',
											backgroundColor: 'transparent',
											border: '1px solid #0C3E9C66',
											borderRadius: '8px',
										},
									}}
									value={modalWireValues.bankName}
									onChange={e =>
										setModalWireValues(prev => ({
											...prev,
											bankName: e.target.value,
										}))
									}
									sx={{ mb: 2 }}
								/>
								<Typography
									sx={{
										mb: '5px',
										fontFamily: 'Manrope',
										fontSize: '12px',
										fontWeight: 700,
									}}
								>
									{t('address')}
								</Typography>
								<TextField
									variant='standard'
									type='text'
									fullWidth
									InputProps={{
										disableUnderline: true,
										sx: {
											fontSize: '13px',
											fontFamily: 'Manrope',
											p: '2px 5px 1px 5px',
											backgroundColor: 'transparent',
											border: '1px solid #0C3E9C66',
											borderRadius: '8px',
										},
									}}
									value={modalWireValues.address}
									onChange={e =>
										setModalWireValues(prev => ({
											...prev,
											address: e.target.value,
										}))
									}
								/>
							</>
						) : (
							<Box>
								{modalName == 'paypal' ? (
									<Box component='img' src='/paypal.svg' />
								) : (
									<Typography
										sx={{
											fontFamily: 'Manrope',
											fontSize: '12px',
											fontWeight: 700,
										}}
									>
										{t('wallet')}
									</Typography>
								)}
								<TextField
									autoFocus
									variant='standard'
									type='text'
									fullWidth
									InputProps={{
										disableUnderline: true,
										sx: {
											fontSize: '13px',
											fontFamily: 'Manrope',
											p: '2px 5px 1px 5px',
											backgroundColor: 'transparent',
											border: '1px solid #0C3E9C66',
											borderRadius: '8px',
										},
									}}
									value={modalInputValue}
									onChange={e => setModalInputValue(e.target.value)}
								/>
							</Box>
						)}
					</DialogContent>

					<DialogActions sx={{ p: 0, pt: '10px' }}>
						<Button
							onClick={handleModalSave}
							variant='contained'
							sx={{
								width: '100%',
								height: '56px',
								border: '1px solid #232323',
								borderRadius: '6px',
								background: 'linear-gradient(180deg, #58A9FF, #0044FF)',
								fontFamily: 'Manrope',
								fontSize: '22px',
								fontWeight: 700,
								textTransform: 'none',
								color: '#FFF',
							}}
						>
							{t('save')}
						</Button>
					</DialogActions>
				</Dialog>
				<Box>abcd</Box>
			</Box>
		</Box>
	)
}

export default ClientPage

----
D:\Coding\styx-cash\src\pages\ClientPage\index.tsx
----
export { default } from './ClientPage'

----
D:\Coding\styx-cash\src\pages\ClientsPage\ClientCard.tsx
----

----
D:\Coding\styx-cash\src\pages\ClientsPage\ClientsPage.tsx
----
import { Box, IconButton, Typography } from '@mui/material'
import { useTranslation } from 'react-i18next'
import CreateIcon from '@mui/icons-material/Create'
import { useEffect, useState } from 'react'
import { getClients, Client } from '@/api/clientService'
import { Loader } from '@/components'
import { useNavigate } from 'react-router-dom'
import { getDecimalValue } from '@/hooks/useDecimalValue'

const ClientsPage = () => {
	const { t } = useTranslation()
	const navigate = useNavigate()
	const [clients, setClients] = useState<Client[]>([])
	const [loading, setLoading] = useState(true)
	const [error, setError] = useState('')

	useEffect(() => {
		const fetchClients = async () => {
			try {
				const data = await getClients()
				setClients(data)
			} catch (err) {
				setError(t('error occurred'))
				console.error('Failed to fetch clients:', err)
			} finally {
				setLoading(false)
			}
		}

		fetchClients()
	}, [t])

	const headerStyles = {
		fontFamily: 'Manrope',
		fontSize: '12px',
		fontWeight: 700,
	}

	const cellStyles = {
		fontFamily: 'Manrope',
		fontSize: '12px',
	}

	if (loading) {
		return <Loader />
	}

	if (error) {
		return <Typography color='error'>{error}</Typography>
	}

	return (
		<Box>
			<Typography sx={{ ml: '2px', fontFamily: 'Manrope', fontSize: '14px' }}>
				<span style={{ opacity: 0.5 }}>{t('admin menu')}</span> | {t('clients')}
			</Typography>

			<Box sx={{ mt: '30px' }}>
				<Box
					sx={{
						display: 'flex',
						justifyContent: 'space-between',
						alignItems: 'center',
					}}
				>
					<Box sx={{ display: 'flex', alignItems: 'center', gap: '25px' }}>
						<Typography
							sx={{
								fontFamily: 'Manrope',
								fontSize: '22px',
								fontWeight: 700,
								lineHeight: 1,
								textTransform: 'uppercase',
							}}
						>
							{t('clients')}
						</Typography>
						<Typography
							sx={{
								fontFamily: 'Manrope',
								fontSize: '14px',
								fontWeight: 400,
								lineHeight: 1,
								color: '#232323',
								opacity: 0.5,
							}}
						>
							{clients.length} {t('found')}
						</Typography>
					</Box>
				</Box>

				<Box sx={{ mt: '30px' }}>
					<Box
						sx={{
							height: '32px',
							px: '10px',
							display: 'flex',
							justifyContent: 'space-between',
							alignItems: 'center',
							backgroundColor: '#F7F9FF',
							borderRadius: '8px',
						}}
					>
						{[
							'Id',
							t('first name'),
							t('last name'),
							t('wallet'),
							t('balance'),
						].map((text, index) => (
							<Typography
								key={index}
								sx={{
									width:
										index === 0
											? '20px'
											: index === 3
											? '250px'
											: index === 4
											? '95px'
											: '70px',
									...headerStyles,
								}}
							>
								{text}
							</Typography>
						))}
					</Box>

					{clients.map((client, index) => (
						<Box
							key={client._id}
							sx={{
								mt: '12px',
								height: '32px',
								px: '10px',
								display: 'flex',
								justifyContent: 'space-between',
								alignItems: 'center',
								borderRadius: '8px',
								border: '0.5px solid #9eb2d7',
							}}
						>
							<Typography sx={{ width: '20px', ...cellStyles }}>
								{index + 1}
							</Typography>
							<Typography sx={{ width: '70px', ...cellStyles }}>
								{client.firstName}
							</Typography>
							<Typography sx={{ width: '70px', ...cellStyles }}>
								{client.lastName}
							</Typography>
							<Typography sx={{ width: '250px', ...cellStyles }}>
								{client.walletBTCAddress || 'N/A'}
							</Typography>
							<Box
								sx={{
									width: '95px',
									display: 'flex',
									justifyContent: 'space-between',
									alignItems: 'center',
								}}
							>
								<Typography sx={cellStyles}>
									{getDecimalValue(
										client.balance as { $numberDecimal: string }
									)}
								</Typography>
								<IconButton onClick={() => navigate(`/clients/${client._id}`)}>
									<CreateIcon
										sx={{ width: '18px', height: '18px', color: '#0246FF' }}
									/>
								</IconButton>
							</Box>
						</Box>
					))}
				</Box>
			</Box>
		</Box>
	)
}

export default ClientsPage

----
D:\Coding\styx-cash\src\pages\ClientsPage\index.tsx
----
export { default } from './ClientsPage'

----
D:\Coding\styx-cash\src\pages\NotFoundPage\index.tsx
----
export { default } from './NotFoundPage'

----
D:\Coding\styx-cash\src\pages\NotFoundPage\NotFoundPage.tsx
----
import { Typography } from '@mui/material'

const NotFoundPage = () => {
	return <Typography variant='h4'>Ошибка 404 - Страница не найдена</Typography>
}

export default NotFoundPage


----
D:\Coding\styx-cash\src\pages\WithdrawPage\index.tsx
----
export { default } from './WithdrawPage'

----
D:\Coding\styx-cash\src\pages\WithdrawPage\WithdrawPage.tsx
----
const WithdrawPage = () => {
	return <div>WithdrawPage</div>
}

export default WithdrawPage

----
D:\Coding\styx-cash\src\router\ProtectedRoute.tsx
----
import { Navigate } from 'react-router-dom'
import { isAuthenticated } from '@/api/authService'

interface ProtectedRouteProps {
	children: JSX.Element
}

const ProtectedRoute = ({ children }: ProtectedRouteProps) => {
	return isAuthenticated() ? children : <Navigate to='/' replace />
}

export default ProtectedRoute

----
D:\Coding\styx-cash\src\router\routerConfig.tsx
----
import { lazy, Suspense } from 'react'
import { RouteObject } from 'react-router-dom'
import routes from './routes.json'
import ProtectedRoute from './ProtectedRoute'
import MainLayout from '@/layouts/MainLayout'
import { Loader } from '@/components'

interface LayoutProps {
	children: React.ReactNode
}

const lazyLoad = (componentName: string) =>
	lazy(
		() =>
			import(
				/* @vite-ignore */ `../pages/${componentName}/${componentName}.tsx`
			)
	)

const isLayoutRoute = (route: any): route is { layout: string } => {
	return 'layout' in route
}

const isPrivateRoute = (route: any): route is { private: boolean } => {
	return 'private' in route
}

export const generateRoutes = (): RouteObject[] => {
	return Object.values(routes).map(route => {
		const Component = lazyLoad(route.component)

		// Определяем Layout
		const Layout =
			isLayoutRoute(route) && route.layout === 'MainLayout'
				? MainLayout
				: ({ children }: LayoutProps) => <>{children}</>

		const element = (
			<Layout>
				<Suspense fallback={<Loader />}>
					<Component />
				</Suspense>
			</Layout>
		)

		return {
			path: route.path,
			element:
				isPrivateRoute(route) && route.private ? (
					<ProtectedRoute>{element}</ProtectedRoute>
				) : (
					element
				),
		}
	})
}

----
D:\Coding\styx-cash\src\router\RouterContent.tsx
----
import { Routes, Route } from 'react-router-dom'
import { generateRoutes } from './routerConfig'
import useRouteTitle from '@/hooks/useRouteTitle'

const RouterContent = () => {
	useRouteTitle()

	return (
		<Routes>
			{generateRoutes().map((route, index) => (
				<Route key={index} path={route.path} element={route.element} />
			))}
		</Routes>
	)
}

export default RouterContent

----
D:\Coding\styx-cash\src\router\routes.json
----
{
	"LandingPage": {
		"path": "/",
		"component": "LandingPage",
		"title": "Styx Cash"
	},
	"HomePage": {
		"path": "/home",
		"component": "HomePage",
		"title": "Home",
		"layout": "MainLayout",
		"private": true
	},
	"TransactionsPage": {
		"path": "/transactions",
		"component": "TransactionsPage",
		"title": "Transactions",
		"layout": "MainLayout",
		"private": true
	},
	"ProfilePage": {
		"path": "/profile",
		"component": "ProfilePage",
		"title": "Profile",
		"layout": "MainLayout",
		"private": true
	},
	"CustomerSupportPage": {
		"path": "/support",
		"component": "CustomerSupportPage",
		"title": "Customer Support",
		"layout": "MainLayout",
		"private": true
	},
	"TopUpPage": {
		"path": "/top-up",
		"component": "TopUpPage",
		"title": "Top-Up",
		"layout": "MainLayout",
		"private": true
	},
	"WithdrawPage": {
		"path": "/withdraw",
		"component": "WithdrawPage",
		"title": "Withdraw",
		"layout": "MainLayout",
		"private": true
	},
	"ClientsPage": {
		"path": "/clients",
		"component": "ClientsPage",
		"title": "Clients",
		"layout": "MainLayout",
		"private": true
	},
	"AdminTransactionsPage": {
		"path": "/admin-transactions",
		"component": "AdminTransactionsPage",
		"title": "Transactions",
		"layout": "MainLayout",
		"private": true
	},
	"ClientPage": {
		"path": "/clients/:id",
		"component": "ClientPage",
		"title": "Clients",
		"layout": "MainLayout",
		"private": true
	},
	"NotFoundPage": {
		"path": "*",
		"component": "NotFoundPage",
		"title": "Страница не найдена"
	}
}

----
D:\Coding\styx-cash\src\types\routes.d.ts
----
interface BaseRoute {
	path: string
	component: string
	title: string
}

interface LayoutRoute extends BaseRoute {
	layout: string
}

interface PrivateRoute extends LayoutRoute {
	private: true
}

type RouteConfig = BaseRoute | LayoutRoute | PrivateRoute

declare module '@/router/routes.json' {
	const routes: Record<string, RouteConfig>
	export default routes
}

----
D:\Coding\styx-cash\tsconfig.app.json
----
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}

----
D:\Coding\styx-cash\tsconfig.json
----
{
	"compilerOptions": {
		"target": "ESNext",
		"module": "ESNext",
		"types": ["vite/client", "react/experimental", "react-dom/experimental"],
		"jsx": "react-jsx",
		"strict": true,
		"esModuleInterop": true,
		"skipLibCheck": true,
		"forceConsistentCasingInFileNames": true,
		"moduleResolution": "Node",
		"resolveJsonModule": true,
		"allowSyntheticDefaultImports": true,
		"baseUrl": "./",
		"paths": {
			"@/*": ["src/*"],
			"@assets/*": ["src/assets/*"],
			"@components/*": ["src/components/*"],
			"@config/*": ["src/config/*"],
			"@hooks/*": ["src/hooks/*"],
			"@layouts/*": ["src/layouts/*"],
			"@pages/*": ["src/pages/*"],
			"@router/*": ["src/router/*"],
			"@store/*": ["src/store/*"],
			"@styles/*": ["src/styles/*"],
			"@types/*": ["src/types/*"],
			"@utils/*": ["src/utils/*"],
			"@fonts/*": ["public/fonts/*"],
			"@api/*": ["src/api/*"]

		}
	}
}

----
D:\Coding\styx-cash\tsconfig.node.json
----
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

----
D:\Coding\styx-cash\vite.config.ts
----
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
	plugins: [react()],
	resolve: {
		alias: {
			'@': '/src',
			'@assets': '/src/assets',
			'@components': '/src/components',
			'@config': '/src/config',
			'@hooks': '/src/hooks',
			'@layouts': '/src/layouts',
			'@pages': '/src/pages',
			'@router': '/src/router',
			'@store': '/src/store',
			'@styles': '/src/styles',
			'@types': '/src/types',
			'@utils': '/src/utils',
			'@fonts': '/src/fonts',
			'@api': '/src/api',
		},
	},
	build: {
		rollupOptions: {
			output: {
				manualChunks: {
					react: ['react', 'react-dom', 'react-router-dom'],
				},
			},
		},
	},
})